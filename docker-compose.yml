version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: mealsplit
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mealsplit
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mealsplit"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application
  app:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://mealsplit:password@postgres:5432/mealsplit
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - BACKEND_CORS_ORIGINS=http://localhost:5173,http://localhost:3000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_EMBEDDING_MODEL=${GEMINI_EMBEDDING_MODEL:-text-embedding-004}
      - GEMINI_TEXT_MODEL=${GEMINI_TEXT_MODEL:-gemini-1.5-flash}
    volumes:
      - .:/app
      - uploads:/tmp/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Vite React Frontend (MealSplit Web App)
  web:
    image: node:18-alpine
    working_dir: /web
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    volumes:
      - ./MealSplit Web App:/web
    depends_on:
      app:
        condition: service_started
    restart: unless-stopped

  # Alembic migrations (run once)
  migrate:
    build:
      context: .
      target: development
    environment:
      - DATABASE_URL=postgresql://mealsplit:password@postgres:5432/mealsplit
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  uploads:
